
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum EWalletType {
  DEPOSIT
  FEE_PAYER_FUND
  RUN_FUNDING
  VOLUME
  FEES
  MARKET_MAKING
}



model CompanyWallet {
  pubkey String @id

  encryptedPrivKey String

  type EWalletType

  isActive Boolean @default(true) // if the wallet is still actively used, especially useful for sub wallets
   
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
}

enum EServiceType {
  VOLUME
  RANKING
  MARKET_MAKING
}

model SplToken {
  tokenMint      String                        @id
  symbol         String                        
  name           String                        
  decimals       Int                           @default(9)
  isSPL          Boolean                       @default(true)
  createdAt      DateTime                      @default(now())
  updatedAt      DateTime                      @updatedAt
  lastUsdcPrice  Float?

  usedInBookedServices BookedService[]
}



model BookedService {
  id String @id @default(cuid())

  type EServiceType

  usedSplTokenMint String?
  usedSplToken SplToken? @relation(fields: [usedSplTokenMint], references: [tokenMint])

  solAmountForService Float?



  botCustomerId String 
  botCustomer BotCustomer @relation(fields: [botCustomerId], references: [id])

  mainWallet BotCustomerWallet @relation(fields: [mainWalletId], references: [pubkey])
  mainWalletId String @unique

  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt

  description String?
}

model BotCustomerWallet {
  pubkey String @id

  encryptedPrivKey String

  type EWalletType

  botCustomerId String 
  botCustomer BotCustomer @relation(fields: [botCustomerId], references: [id])

  isActive Boolean @default(true) // if the wallet is still actively used, especially useful for sub wallets
   
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt

  service BookedService?
}

model BotCustomer {
  id String @id @default(cuid())

  name String?
  email String?
  telegramUsername String?

  walletsAssociated BotCustomerWallet[]  
  bookedServices BookedService[]

  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
}

enum EMarketMakingCycleType{
  PRE_PUSH
  PUSH
  POST_PUSH
  MAINTAIN
  TAKE_PROFIT
}

model MarketMakingCycle {
  id String @id @default(cuid())

  type EMarketMakingCycleType

  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
}
